import paho.mqtt.client as mqtt
import json

# ===================================
# R√©cup√©ration des donn√©es depuis TTN 
# ===================================

# Param√®tres TTN
app_id = "my-application"
device_id = "Device"
access_key = "DKFDKFOEFL"
broker = "eu1.cloud.thethings.network"
port = 1883

# Callback quand un message est re√ßu
def on_message(client, userdata, message):
    try:
        data = json.loads(message.payload.decode("utf-8"))  # D√©codage propre du JSON
        measures = data.get('uplink_message', {}).get('decoded_payload', {}).get('Measures', [])

        if not measures:
            print("‚ö†Ô∏è Aucune mesure trouv√©e dans le message re√ßu.")
            return

        print(f"üì© Message re√ßu : {measures}")  # Affichage pour debug

        # Stocker les donn√©es dans un buffer global (ex: liste en m√©moire)
        global received_data
        received_data.append(measures)

    except json.JSONDecodeError:
        print("‚ùå Erreur : Impossible de d√©coder le message JSON.")
    except Exception as e:
        print(f"‚ùå Erreur inattendue : {e}")

# Initialisation du client MQTT
client = mqtt.Client(protocol=mqtt.MQTTv311)
client.username_pw_set(app_id, access_key)
client.on_message = on_message
client.connect(broker, port)

# S'abonner au topic TTN
topic = f"v3/{app_id}@ttn/devices/{device_id}/up"
client.subscribe(topic)

# Liste pour stocker les donn√©es en m√©moire temporaire
received_data = []

# Lancer l'√©coute des messages MQTT
client.loop_start()
